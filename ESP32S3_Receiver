#include <USB.h>
#include <USBHIDGamepad.h>
#include <esp_now.h>
#include <WiFi.h>
#include "esp_wifi.h"

// Create a USB HID gamepad object
USBHIDGamepad Gamepad;

// Structure to hold incoming data
typedef struct struct_message {
  uint32_t buttonStates;
  int8_t joystickX;
  int8_t joystickY;
} struct_message;

// Create a struct_message to hold incoming data
struct_message incomingData;

// Callback function for receiving data with the correct signature
void onDataRecv(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
  // Copy the incoming data into the struct
  memcpy(&incomingData, data, sizeof(incomingData));

  // Update the gamepad state with the received values
  int8_t z = 0, rz = 0, rx = 0, ry = 0;  // Other axes not used
  uint8_t hat = 0;  // Hat switch not used

  // Use the send function with the correct parameters
  Gamepad.send(incomingData.joystickX, incomingData.joystickY, z, rz, rx, ry, hat, incomingData.buttonStates);
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Initialize USB HID functionality
  USB.begin();
  Gamepad.begin();

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Set maximum Wi-Fi transmission power for lowest latency
  esp_wifi_set_max_tx_power(78);

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  Serial.println("ESP-NOW initialized successfully");

  // Register for receive callback
  esp_now_register_recv_cb(onDataRecv);
}

void loop() {
  // Nothing to do here, wait for incoming data and update gamepad state
  // No delay here to avoid introducing latency in handling incoming data
}
